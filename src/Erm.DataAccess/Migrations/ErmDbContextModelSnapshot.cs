// <auto-generated />
using System;
using Erm.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Erm.DataAccess.Migrations
{
    [DbContext(typeof(ErmDbContext))]
    partial class ErmDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Erm.DataAccess.BusinessProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("domain");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("business_process", (string)null);
                });

            modelBuilder.Entity("Erm.DataAccess.Risk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessImpact")
                        .HasColumnType("INTEGER")
                        .HasColumnName("business_impact");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("OccurenceData")
                        .IsRequired()
                        .HasColumnType("DATE")
                        .HasColumnName("occurence_data");

                    b.Property<int>("Probability")
                        .HasColumnType("INTEGER")
                        .HasColumnName("probability");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("risk", (string)null);
                });

            modelBuilder.Entity("Erm.DataAccess.RiskProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessProcessId")
                        .HasColumnType("integer")
                        .HasColumnName("business_process_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("description");

                    b.Property<int>("OccurrenceProbability")
                        .HasColumnType("INTEGER")
                        .HasColumnName("occurrence_probability");

                    b.Property<int>("PotentialBusinessImpact")
                        .HasColumnType("INTEGER")
                        .HasColumnName("potential_business_impact");

                    b.Property<string>("PotentialSolution")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("potential_solution");

                    b.Property<int?>("RiskId")
                        .HasColumnType("integer");

                    b.Property<string>("RiskName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("risk_name");

                    b.HasKey("Id");

                    b.HasIndex("BusinessProcessId");

                    b.HasIndex("RiskId");

                    b.ToTable("risk_profile", (string)null);
                });

            modelBuilder.Entity("Erm.DataAccess.RiskProfile", b =>
                {
                    b.HasOne("Erm.DataAccess.BusinessProcess", "BusinessProcess")
                        .WithMany("RiskProfiles")
                        .HasForeignKey("BusinessProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Erm.DataAccess.Risk", null)
                        .WithMany("RiskProfiles")
                        .HasForeignKey("RiskId");

                    b.Navigation("BusinessProcess");
                });

            modelBuilder.Entity("Erm.DataAccess.BusinessProcess", b =>
                {
                    b.Navigation("RiskProfiles");
                });

            modelBuilder.Entity("Erm.DataAccess.Risk", b =>
                {
                    b.Navigation("RiskProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
